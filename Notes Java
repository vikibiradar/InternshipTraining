---------------------------------
Java 1.8 features
--------------------------
1)Java is Object Oriented programming Language.
2)Java is simpler then c and c++ as we don't have pointer concept, Multiple Inheritance, operator overloading.
3)Java supports multi-threading or multi-tasking.
4)We can develop web-application, network application, standalone application and also mobile application.
5)In java we have interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor. There is automatic garbage clearance.
7)java is secured language. we have 4 access specifier private, public, protected, default.

------------------------------------------
Data types
------------------------------------------
primative datatype
-------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolen - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-----------------------------------------
derived datatype
----------------------------
1)String
2)array
----------------------------------------
Operator
-------------------
1)unary :-i++,++i,i--,--i

2)binary :-
i)arithmetic :- +,-,*,/,%(modules)
ii)comparative :- <,>,<=,>=
iii)assignment :- =,!=
iv)bitwise :- >>,<<
v)logical:-or, and

3)ternary :- :,?
---------------------------------------------------------------------------------------------------
we have 4 access specifier private, public, protected, default.

1)private :- if we declare variable and methods as private we can access it within the class only.
2)public :- if we declare variable and methods as public we can access it within the class, outside the class and also outside the package.
3)protected :- if we declare variable and methods as protected we can access it within the class and also outside the child class.
4)default :- if we declare variable and methods as default we can access it within the class ,out side the class but not outside the package.
-------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Class :- A class is a known as object framework.
A class contains variables and methods.
----------------------------------------------------------------------------------------------
Object is a reference pointer to the class.
We can access the variables and methods of a class using Object.
----------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Constructor
-----------------------------
A constructor is a method which has the same name as that of the class name.
It doesn't return any value.it doesn't have any return type.
There are 2 types of constructor
1)default constructor :- it is without any parameter.
2)parameterized constructor :- it is with parameter.
To access a constructor we require an object.
--------------------------------------------------------------------------------------------------
Difference between constructor and a method.
-----------------------------------------------------------------
1)a method can have any name but a constructor will have only the class name .
2)a method returns a value but constructor does not return any value.
3)A constructor execute automatically when an object is created for a class.
but function has to be called explicitly by the help of an object. 
4)to execute 5 constructors we have to create 5 objects but to execute 5 functions/methods we require 1 object.
------------------------------------------------------------------------------------
setter() is used to set the values
getter() is used to get the values
-----------------------------------------------------------------
program-8
-----------------------
package monday;

public class Employee 
{
private int empno;
private String name,designation;
private float salary;
//right click >source >generate getter and setter
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}


}
-------------------------------------------------------------------------------
Inheritance
-------------------------------------------------------------------------------
It is one of the oops concept
Reuse of existing code. and we can add some more features to it.
example :- iPhone10 to iPhone15 some new features are add to the older version.
There are 5 types of Inheritance.
1)single Inheritance
2)multi-level Inheritance
3)hierarchal Inheritance
----------------------Java doesn't support---------------------------------
4)multiple inheritance
5)Hybrid inheritance(combination)
------------------------------------------------------------------------------------
we use the keyword extends to inherite the parent class into the child class.
we use the keyword super to access the parent class variables and methods into the child class.
1)The parent class should not be public
2)We will create object of the child class
3) The class name should be the child class name which contain the main ()
4)parent class constructor will execute first then the child class constructor
------------------------------------------------------------------------------------- 
-------------------------------------------------------------------------
*super constructor will execute first.
-----------------------------------------------------------------------
In inheritance the child class will depend upon the parent class. It is known as tight coupling.
Java supports loose coupling.
Inheritance(IS-A) relationship.
Aggregation(HAS-A) relationship.
example:-
Employee has-a address
Bank has-a customer
________________________________________________
https://www.durgasoft.com/scjp_material.asp
________________________________________________
-------------------------------------------------------------
Enum Declaration: The Day enum defines constants for each day of the week.
--------------------------------------------------------------------
Accessing Enum Values: You can assign an enum value (Day.WEDNESDAY) to a variable.
--------------------------------------------------------------------
Switch Statement: Enums work well with switch statements for clean code.
---------------------------------------------------------
Loop Through Enum Values: The values() method returns an array of all constants in the enum, allowing iteration.
---------------------------------------------------------------------------------------------------
polymorphism:-
1)runtime polymorphism:-Method Overriding
2)compile time polymorphism :-Method Overloading
Method Overloading :- compile time Polymorphism. we need one class.
The method name is same but the return type and parameter has different data type.
example:-
int sum(int a, int b);
float sum(float a, float b);
--------------------------------------------------------
Encapsulation:-Protecting of data by using private and protected access specifier.
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.
It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members.
-------------------------------------------------------------------------
Abstraction :- is a process of hiding the implementation details and showing only functionality to the user.
Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where we type the text and send the message. We do not know the internal processing about the message delivery.
-------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Method Overriding:- runtime Polymorphism.(abstract class, Interface).we need two or more class.
--------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------
Abstract class
------------------------
It is a class which contain abstract method means method without body.
It can also contain method with body known as concrete method.
we cannot create object of the abstract class.
we have to inherit it into a child class where we have to override the abstract methods.
Then we can create object for the child class.
We cannot have a method without body .we have to declare it as abstract or it should be inside the interface.
What is the use of abstract class.
It contains some abstract methods which has to be overridden inside the child class.
We can have a constructor in the abstract class.
*abstract windowing toolkit(AWT)

--------------------------------------------------------------------------------------------
Interface:-
It is similar to abstract class but it only contains abstract methods no concrete methods. we don't use the keyword abstract in this.
We cannot create object for an interface.
We have to implement the interface into a child class.
We have to override the abstract methods into a child class and create object for the child class.
By interface java performs the multiple Inheritance.
we can declare a variable inside a interface .this is by default static(we can access it without object ) and final(cann't be changed)
-------------------------------------------------------------------------------------------
 --------------------------------------------------------------------------------------------------
jdk21---->jre---->JVM
 static :- we can declare a variable as static, method as static, we can have static block and we can have static class.
We can access it without creating an object.
We can access it with the help of the class name.
A single copy of the static variable, method, block or class is created in the JVM.
It is used for memory management.
If we declare a static block it execute before the main method.
-------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------
we cannot access a non-static variables inside a static method.
we can access static variables inside a non-static method.
------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
 final keyword
-------------------------
This is a done to protect the data.
We can declare the variable as final, method as final and class as final.
If we declare variable as final we have to assign it and it cannot be changed.
If we declare method as final we cannot override it.
If we declare a class as final we cannot inherite it.
--------------------------------------------------------------------------------------------------
Wrapper class
-------------------------------------------------------------------------
All datatypes in java are also class known as wrapper class.
1)byte -Byte
2)short - Short
3)int - Integer
4)float - Float
5)double - Double
6)String
7)long - Long
8)char - Character
9)boolean - Boolean
These class belongs to lang package. It is a default package.
---------------------------------------------------------------------
public static void main(String h[]) 

public is a access specifier so that JVM can access the main method which is outside the package.
static is used so that we can access static variables and methods inside it. and we need not create object of the main()
void is the return type.
main is the keyword for making the method as main.
(String h[]) -- we can pass string arguments inside it.
--------------------------------------------------------------------------------------------------
Exception Handling
------------------------------
There are 3 type of error.
1)compile time error.(manually)
2)logical error(manually)
3)runtime error.
In exception handling we will discuss about only runtime error.
example:-
-------------------
1)dividing a number by zero.
2)crossing the array limit.
3)entering a character in place to number.
The aim of exception handling is we don't want the program to terminate in between.
The program should display an error message but the flow of the program should be till the end.
----------------------------------------------------------------------------
There are 5 keywords used to handle the runtime errors.
1)try
2)catch
3)finally
4)throw
5)throws
------------------------------------------------------------------------------------------------
-----------------------------------------------------------------
In this case when there is error means we divide the number by zero.
The catch will execute and display the error message. Then the rest part of the program will execute.
-------------------------------------------------------------------------------------------------------
when there is no error the catch block will not execute. The program will execute normally.
--------------------------------------------------------------------------------------------------
There are 3 type of Exception
-------------------------------------------------------------------
1)checked exception(we have to handle it first otherwise it will give compile time error.)
i)IOException
ii)SQLException
iii)ClassNotFoundException
iv)Interrupted Exception
-----------------------------------------------------------------
2)unchecked exception
i)Arithmatic exception
ii)NumberFormat exception
iii)IndexOutOfBound exception
iv)NullPointer exception
v)InputMismatchException
-----------------------------------------------------------------
3)error
i)StackOverFlow error
ii)OutOfMemory error
iii)Machine error
-----------------------------------------------
-----------------------------------------------------------------------------------------------------
We generally don't write so many catch block .It will increase the line of code.
and the execution time also increases.so it in not adviceable to write multiple catch block.
--------------------------------------------------------------------
try-catch :-if try is getting error then the catch with handle the error and catch will display the error.
try-finally:-In this if try gets a error or not it doesn't matter the finally block will definitely execute.
It handles the error and mainly used for closing of connection, file closing etc.
Can we write try block without catch block.
yes using finally block.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
throws Exception:-
-------------------------------
we don't require any body for throws exception .we mention it with the method.
This is mostly used with checked exception.
when we work with IOException, SQLException, Interrupted Exception etc.
------------------------------------------------------------------
------------------------------------------------------------------
throw keyword
--------------------------------
It is used for user defined exception.
example :- 
1)age should be greater than or equal to 18 years to cast your vote.
2)salary of employee should be greater than 15000.
3)marks should be greater than zero.
------------------------------------------------------------------------
----------------------------------------------------------------------------
ArrayIndexOutOfBound Exception(crossing the array limit)
----------------------------------------------------------------------
This error occur when we cross the array limit.
example :- if the array size is 5 and we are entering 6 elements it will throw an error that is ArrayIndexOutOfBound exception.
-----------------------------------------------------------------------------------
To create immutable classes in Java, you need to ensure that the state of an object cannot be modified after it's created. Here are the steps to create an immutable class in Java:

Declare the class as final so it can't be extended.
Make all fields private and final so they can only be assigned once.
----------------------------------------------------------------------------------
Lambda Expression
--------------------------------
It is also known as functional interface.
In this the interface will only contain one abstract method so it is called functional interface.
In lambda expression we don't require 2 classes (parent and child).we don't have to override.  we don't have to implement the interface.
There is a annotation @FunctionalInterface.
It is used to declare an interface as functional interface.(optional)
------------------------------------------------------------------------

--------------------------------------------------------------------------
We have 3 classes String, StringBuffer, StringBuilder
--------------------------------------------------------------------------
String :-Immutable(cannot be changed).
String Buffer:-mutable(can be changed).
StringBuilder:-mutable(can be changed).
---------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
StringBuffer is synchronized. 
with the methods we use the key word synchronized.
in this after one method complete then the second method start excecuting.
------------------------------------------------------------------------------------------------------
StringBuilder is not synchronized.
StringBuffer takes more time to execute than StringBuilder.
Thread synchronized means one thread complete excecution then the next thread will start execute.
example :-ATM (one person will do the transaction then the second person will do the transaction).
---------------------------------------------------------------------------------------------
Collection Framework
----------------------------------------------------------------
int a[]=new int[5]; ---------------array the size is fixed.
In case of Collection the size will be incrementing dynamically as we enter the data.
---------------------------------------------------------------
It is a collection of Object.
It provides architecture to store, manipulate group of Objects.
We can do all operations such as searching, sorting, inserting, delete, manipulating .
1)Set 2)List 3)Map 4)queue
Set is a Interface . It does not allow duplicate data.
It has classes :-
1)TreeSet :- It will display the data in the shorted order.
2)HashSet :-It will display the data in random order.
3)LinkedHashSet :- It will display the data in same order.
---------------------------------------------------------------------------------
---------------------
//TreeSet :- It will display the data in the shorted order.
---------------------------------------------------------------------------------------------------------
//HashSet :-It will display the data in random order.
-----------------------------------------------------------------
LinkedHashSet :- It will display the data in same order.       
------------------------------------------------------------------------------------------------------
AutoBoxing and Unboxing
-----------------------------------------------------------------------------------------------------
The autoboxing convert the primative data types into it equivalent Wrapper type.
The unboxing convert the wrapper type to primative datatype.
-----------------------------------------------------------------------------------------------------
------------------------------------------
for each Demo
---------------------
package monday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
System.out.println(ts.isEmpty());
//to check if the TreeSet is empty or not returns a Boolean value
System.out.println(ts.size());
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println("***********************");
//for each loop
for(Object obj:ts)//the ts value will be stored into the obj one by one and we will print the obj.
	System.out.println(obj);
System.out.println("***********************");
}
}
-------------------------------------------
Iterator :- it is used to iterate the data .It is an Interface.
It has 3 methods 
1)hasNext();
2)next();
3)remove();
----------------------
package monday;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args)
{
TreeSet<Integer> ts=new TreeSet<Integer>();
ts.add(70);
ts.add(20);
ts.add(30);
ts.add(10);
ts.add(50);
ts.add(50);
ts.add(60);
System.out.println("***********************");
//for each loop
for(Object obj:ts)//the ts value will be stored into the obj one by one and we will print the obj.
	System.out.println(obj);
System.out.println("***********************");
Iterator itr=ts.iterator();
while(itr.hasNext())
{
	System.out.println(itr.next());
}
}
}
--------------------------------------------------------------------------------
List :-It is an Interface.
It allows duplicate records.
We have classes 1)Stack 2)ArrayList 3)Linkedlist 4)Vector
stack :FILO .The last element will be index 1.
List display in the same order.
1)Stack 
st.push(10);//insert the data
t.println(st.pop());//delete the data
System.out.println(st.peek());//to see the last data
2)Linked list:
ls.add(10);
ls.forEach((x)->System.out.println(x));
ls.addFirst(9);
ls.removeFirst();
ls1.removeLast();
ls.addAll(ls1); // Adding ls1 to ls
--------------------------------------------------------------------------------------
Interface to iterate the data:-
---------------------------------------------------------------------------------------------------------
Iterator:-hasNext(),next();remove();//In this we can move in one direction.
ListIterator:- In this we can move in both direction.
forward :- In this we have hasNext(),next().First the pointer with move in forward direction then it will move in backward direction.
backward:- In this we have hasPrevious(),previous();
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
 java.util.Collections
---------------------------------------
It has lot of static methods which can be implemented  set,list,map,queue
It this we have sort() which can sort a list,map,queue.
Collections.sort()
Collections.max(ls)
Collections.min(ls)
-------------------------------------------------------------
java.lang.Comparable :-
public abstract int compareTo(T);
it is used to sort our own object data. It checks the String ascii code.
in this if the current object is greater than the specified object it return (+) value.
in this if the current object is lesser than the specified object it return (-) value.
in this if the current object is equal than the specified object it return zero value.
-----------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
